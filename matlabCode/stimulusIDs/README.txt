The stimulusIDs system is replacing the old suffix system for categorizing stimulus types as of September 2022. 

In the past, you would add a suffix to the stimulus type that would be saved as part of the appropriate field name in the completed analysis structure. The purpose of this system was that it helped to organize data during batch analyses (essentially it helps find epochs across cells that should be analyzed together). The difficulty with this system was that I was coming up with arbitrary suffixes (e.g. _ff, or _lowC) that were difficult to keep track of. This informatio was previously housed in C:\Users\mrsco\Box\DataAndAnalysis\labData\OKR\physiology\matlabCode\Info\Conditions.txt and was read directly by the dataViewer app. In the future, this functionality will be entirely phased out in favor of the ID system.

To replace the old system, I am now using IDs. This is a work in progress, but the general idea is that each unique stimulus has its own ID code. The ID numbers are then used to sort through relevant epochs during batch analysis instead of suffixes. ID numbers are matched by directly comparing a large portion of the meta data on each epoch with a reference. The reference says what the field values should be in the meta data in order for the stimulus to be assigned a given ID. There are also datetime limits (earliest and latest permissable recording dates) that can be used to separate out stimuli that occur before/after rig changes.

In the first version of the ID system, the implementation is as follows. All information is housed in C:\Users\mrsco\Box\DataAndAnalysis\labData\OKR\physiology\matlabCode\stimulusIDs. I have created a matlab structure called stimulusIDs.mat with two fields: 1) displayNameCodes and 2) fullList. Inside of displayNameCodes are subfields that each correspond to the name of a particular display name from symphony (e.g. MovingBar). The value of the field is a unique 2 digit number that serves as the beginning of the ID code for all stimuli associated with that given display name. For example, you might have two different contrast moving bars, since they have the same display name they'll both start with ID10, but then the subsequent ID number will be different. The purpose of this is that it just helps group together stimuli that are similar to each other, which makes the ID numbers not completely arbitrary and searching through references a bit more efficient. In the future, this should really probably change so that the ID number is perhaps even less arbitrary. Organizing different stimulus types into a binary tree based on how similar they are will also maximize search efficiency. The second field, fullList, is a cell array. In the first column is a stimulus ID (e.g. ID1013), in the second column is the reference structure associated with that ID (e.g. all of the fields and values that an epoch's metadata would have to match in order to be assigned the ID number, in the third column is the earliest possible date for epochs being assigned the ID (based on the recording time of the epoch), and in the fourth column is the latest possible recording date.

In the same folder, there is also a .m file called findStimulusID. This is the function that currently searches through sitmulusIDs to do the actual work of matching meta data with references during analysis. This function is called by the dataViewer app when the 'ID' button is pressed. There is also an excel sheet in this folder that is a visual representation of the same data stored in stimulusID and it's just helpful for double checking by hand the ID assignments, if needed, and coming up with new ID numbers for new stimuli (though, again, in the future hopefully this later function would be more automated and less arbitrary).